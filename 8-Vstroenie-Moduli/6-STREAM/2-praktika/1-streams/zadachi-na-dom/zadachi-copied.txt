1. Задача 1: Чтение и запись в файлы с помощью потоков2. Описание: Напишите программу, которая будет читать текстовый файл построчно и записывать данные в другой файл, добавляя к каждой строке ее порядковый номер.3. Требования:4. Используйте fs.createReadStream() для чтения файла. Убедитесь, что файл существует и доступен.5. Используйте fs.createWriteStream() для создания нового файла.6. Каждая строка должна быть записана в новом файле с форматом: Номер строки: текст строки.7. Используйте событие data для чтения строк и finish для завершения записи.8. Добавьте обработку ошибок.9. 10. Задача 2: Трансформация данных через поток11. Описание: Создайте поток Transform, который преобразует все гласные буквы в заглавные, а остальные оставляет без изменений.12. Требования:13. Используйте класс Transform из модуля stream.14. Реализуйте метод transform, который принимает буфер, преобразует его в строку и изменяет регистр гласных.15. Подключите этот поток между process.stdin и process.stdout.16. Программа должна продолжать работать до тех пор, пока пользователь не завершит ввод (например, через Ctrl + C).17. Добавьте обработку ошибок.18. 19. Задача 3: Параллельное копирование файлов20. Описание: Напишите программу, которая копирует все файлы из одной директории в другую с использованием потоков.21. Требования:22. Используйте fs.readdir() для чтения содержимого исходной директории.23. Используйте fs.createReadStream() и fs.createWriteStream() для каждого файла.24. Создайте целевую директорию, если она не существует, с помощью fs.mkdirSync().25. Добавьте логирование для каждого успешно скопированного файла.26. Обработайте возможные ошибки чтения или записи файлов.27. 28. Задача 4: Компрессия файла29. Описание: Используйте модуль zlib для создания программы, которая сжимает файл и сохраняет его в новый файл с расширением .gz.30. Требования:31. Используйте fs.createReadStream() для чтения исходного файла.32. Создайте поток сжатия с помощью zlib.createGzip().33. Используйте fs.createWriteStream() для записи сжатого файла.34. Подключите потоки с помощью pipe().35. Добавьте обработку ошибок на всех этапах процесса.36. 37. Задача 5: Создание простого HTTP-сервера с потоками38. Описание: Создайте HTTP-сервер, который читает большой текстовый файл с помощью потоков и отправляет его содержимое клиенту.39. Требования:40. Используйте http.createServer() для создания сервера.41. При запросе на корневой URL (/) используйте fs.createReadStream() для чтения HTML-файла.42. Установите правильные заголовки для типа контента (text/html).43. Используйте pipe() для передачи данных клиенту.44. Добавьте обработку ошибок и вывод сообщений в консоль для отладки.45. 46. Задача 6: Чтение больших файлов построчно47. Описание: Реализуйте программу, которая читает большой текстовый файл построчно с использованием потоков.48. Требования:49. Используйте fs.createReadStream() для чтения файла.50. Обработайте данные в событии data, разбивая на строки и выводя их в консоль.51. Убедитесь, что программа корректно обрабатывает конец файла через событие end.52. Добавьте обработку ошибок для чтения файла.53. 54. Задача 7: Слияние файлов55. Описание: Напишите программу, которая читает два текстовых файла и объединяет их содержимое в третий файл.56. Требования:57. Используйте fs.createReadStream() для обоих файлов.58. Создайте новый файл с помощью fs.createWriteStream().59. Чередуйте чтение данных из обоих файлов и запись в целевой файл.60. Убедитесь, что данные из обоих файлов корректно записываются в целевой файл.61. Обработайте возможные ошибки на каждом этапе.62. 63. Задача 8: Анализ данных через поток64. Описание: Создайте поток Transform, который будет подсчитывать количество строк с определенным словом, заданным пользователем.65. Требования:66. Реализуйте поток Transform, который будет анализировать входящие данные.67. Программа должна принимать слово для поиска из командной строки.68. Каждая строка должна проверяться на наличие слова, и счетчик должен увеличиваться.69. По завершении работы потока выведите количество найденных строк в консоль.70. Обработайте возможные ошибки.71. 72. Задача 9: Трансляция видеофайлов с использованием потоков73. Описание: Напишите программу, которая читает видеофайл и передает его на клиент по HTTP.74. Требования:75. Создайте HTTP-сервер, который будет слушать на определенном порту.76. Используйте fs.createReadStream() для чтения видеофайла.77. При запросе на определенный URL передавайте видео с помощью res.pipe().78. Установите правильные заголовки для передачи видео (Content-Type).79. Обработайте возможные ошибки.80. 81. Задача 10: Логирование ошибок через потоки82. Описание: Напишите программу, которая читает текстовый файл и записывает сообщения об ошибках в лог-файл.83. Требования:84. Используйте fs.createReadStream() для чтения файла.85. Добавьте обработку ошибок, которая будет записывать сообщения в лог-файл через fs.createWriteStream().86. Убедитесь, что сообщения об ошибках записываются корректно, указывая тип ошибки и время.87. После завершения чтения файла выведите сообщение о завершении в консоль.88. Обработайте все возможные ошибки.