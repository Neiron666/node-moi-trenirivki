Задача 1: Чтение и запись в файлы с помощью потоков
Описание: Напишите программу, которая будет читать текстовый файл построчно и записывать данные в другой файл, добавляя к каждой строке ее порядковый номер.
Требования:
Используйте fs.createReadStream() для чтения файла. Убедитесь, что файл существует и доступен.
Используйте fs.createWriteStream() для создания нового файла.
Каждая строка должна быть записана в новом файле с форматом: Номер строки: текст строки.
Используйте событие data для чтения строк и finish для завершения записи.
Добавьте обработку ошибок.

Задача 2: Трансформация данных через поток
Описание: Создайте поток Transform, который преобразует все гласные буквы в заглавные, а остальные оставляет без изменений.
Требования:
Используйте класс Transform из модуля stream.
Реализуйте метод transform, который принимает буфер, преобразует его в строку и изменяет регистр гласных.
Подключите этот поток между process.stdin и process.stdout.
Программа должна продолжать работать до тех пор, пока пользователь не завершит ввод (например, через Ctrl + C).
Добавьте обработку ошибок.

Задача 3: Параллельное копирование файлов
Описание: Напишите программу, которая копирует все файлы из одной директории в другую с использованием потоков.
Требования:
Используйте fs.readdir() для чтения содержимого исходной директории.
Используйте fs.createReadStream() и fs.createWriteStream() для каждого файла.
Создайте целевую директорию, если она не существует, с помощью fs.mkdirSync().
Добавьте логирование для каждого успешно скопированного файла.
Обработайте возможные ошибки чтения или записи файлов.

Задача 4: Компрессия файла
Описание: Используйте модуль zlib для создания программы, которая сжимает файл и сохраняет его в новый файл с расширением .gz.
Требования:
Используйте fs.createReadStream() для чтения исходного файла.
Создайте поток сжатия с помощью zlib.createGzip().
Используйте fs.createWriteStream() для записи сжатого файла.
Подключите потоки с помощью pipe().
Добавьте обработку ошибок на всех этапах процесса.

Задача 5: Создание простого HTTP-сервера с потоками
Описание: Создайте HTTP-сервер, который читает большой текстовый файл с помощью потоков и отправляет его содержимое клиенту.
Требования:
Используйте http.createServer() для создания сервера.
При запросе на корневой URL (/) используйте fs.createReadStream() для чтения HTML-файла.
Установите правильные заголовки для типа контента (text/html).
Используйте pipe() для передачи данных клиенту.
Добавьте обработку ошибок и вывод сообщений в консоль для отладки.

Задача 6: Чтение больших файлов построчно
Описание: Реализуйте программу, которая читает большой текстовый файл построчно с использованием потоков.
Требования:
Используйте fs.createReadStream() для чтения файла.
Обработайте данные в событии data, разбивая на строки и выводя их в консоль.
Убедитесь, что программа корректно обрабатывает конец файла через событие end.
Добавьте обработку ошибок для чтения файла.

Задача 7: Слияние файлов
Описание: Напишите программу, которая читает два текстовых файла и объединяет их содержимое в третий файл.
Требования:
Используйте fs.createReadStream() для обоих файлов.
Создайте новый файл с помощью fs.createWriteStream().
Чередуйте чтение данных из обоих файлов и запись в целевой файл.
Убедитесь, что данные из обоих файлов корректно записываются в целевой файл.
Обработайте возможные ошибки на каждом этапе.

Задача 8: Анализ данных через поток
Описание: Создайте поток Transform, который будет подсчитывать количество строк с определенным словом, заданным пользователем.
Требования:
Реализуйте поток Transform, который будет анализировать входящие данные.
Программа должна принимать слово для поиска из командной строки.
Каждая строка должна проверяться на наличие слова, и счетчик должен увеличиваться.
По завершении работы потока выведите количество найденных строк в консоль.
Обработайте возможные ошибки.

Задача 9: Трансляция видеофайлов с использованием потоков
Описание: Напишите программу, которая читает видеофайл и передает его на клиент по HTTP.
Требования:
Создайте HTTP-сервер, который будет слушать на определенном порту.
Используйте fs.createReadStream() для чтения видеофайла.
При запросе на определенный URL передавайте видео с помощью res.pipe().
Установите правильные заголовки для передачи видео (Content-Type).
Обработайте возможные ошибки.

Задача 10: Логирование ошибок через потоки
Описание: Напишите программу, которая читает текстовый файл и записывает сообщения об ошибках в лог-файл.
Требования:
Используйте fs.createReadStream() для чтения файла.
Добавьте обработку ошибок, которая будет записывать сообщения в лог-файл через fs.createWriteStream().
Убедитесь, что сообщения об ошибках записываются корректно, указывая тип ошибки и время.
После завершения чтения файла выведите сообщение о завершении в консоль.
Обработайте все возможные ошибки.